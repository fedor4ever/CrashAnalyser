<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CIPDCodeSegAvailability_CodeSegMisMatch_Description_L1" xml:space="preserve">
    <value>The code segment: '{0}', for process: '{1}' conflicts with the symbolic information.</value>
  </data>
  <data name="CIPDCodeSegAvailability_CodeSegMisMatch_Description_L2" xml:space="preserve">
    <value>Crash data indicates that the code segment base address is 0x{0:x8}, however, symbolic information suggests it should be: 0x{1:x8}</value>
  </data>
  <data name="CIPDCodeSegAvailability_CodeSegMisMatch_Title" xml:space="preserve">
    <value>Code Segment Mismatch</value>
  </data>
  <data name="CIPDCodeSegAvailability_NoSymbols_Description" xml:space="preserve">
    <value>The code segment: '{0}', for process: '{1}' does not have any associated symbols.</value>
  </data>
  <data name="CIPDCodeSegAvailability_NoSymbols_Title" xml:space="preserve">
    <value>Symbols Unavailable</value>
  </data>
  <data name="CIPDRegAvailability_MissingLR_Description" xml:space="preserve">
    <value>{0} the registers do not contain a value for the link register (R14).</value>
  </data>
  <data name="CIPDRegAvailability_MissingLR_Title" xml:space="preserve">
    <value>Link Register (R14) Not Available</value>
  </data>
  <data name="CIPDRegAvailability_MissingPC_Description" xml:space="preserve">
    <value>{0} the registers do not contain a value for the program counter (R15).</value>
  </data>
  <data name="CIPDRegAvailability_MissingPC_Title" xml:space="preserve">
    <value>Program Counter (R15) Not Available</value>
  </data>
  <data name="CIPDRegAvailability_MissingSP_Description" xml:space="preserve">
    <value>{0} the registers do not contain a value for the current stack pointer (R13).</value>
  </data>
  <data name="CIPDRegAvailability_MissingSP_Title" xml:space="preserve">
    <value>Stack Pointer (R13) Not Available</value>
  </data>
  <data name="CIPDRegAvailability_NoRegsForStack_Description" xml:space="preserve">
    <value>{0} the stack has no associated registers which reduces the accuracy of stack decoding.</value>
  </data>
  <data name="CIPDRegAvailability_NoRegsForStack_Title" xml:space="preserve">
    <value>Registers Missing</value>
  </data>
  <data name="CIPDRegAvailability_NullThisPointer_Description" xml:space="preserve">
    <value>{0} R00 was null and the thread raised an exception. This suggests a possible de-reference of a NULL 'this' pointer.</value>
  </data>
  <data name="CIPDRegAvailability_NullThisPointer_Title" xml:space="preserve">
    <value>Possible De-reference of NULL 'this' Pointer?</value>
  </data>
  <data name="CIPDStackBoundaryValidator_StackOverflow_Description" xml:space="preserve">
    <value>{0} the stack pointer is beyond the start of the stack range, which will result in an exception.</value>
  </data>
  <data name="CIPDStackBoundaryValidator_StackOverflow_Title" xml:space="preserve">
    <value>Stack Overflow</value>
  </data>
  <data name="CIPDStackBoundaryValidator_StackUnderflow_Description" xml:space="preserve">
    <value>{0} the stack pointer is outside of the stack address range.</value>
  </data>
  <data name="CIPDStackBoundaryValidator_StackUnderflow_Title" xml:space="preserve">
    <value>Stack Underflow</value>
  </data>
  <data name="CIPDStackRegisterAvailability_MissingRegisters_Description" xml:space="preserve">
    <value>{0} no registers are available, which may result in incomplete analysis.</value>
  </data>
  <data name="CIPDStackRegisterAvailability_MissingRegisters_Title" xml:space="preserve">
    <value>Registers Missing</value>
  </data>
  <data name="CIPDStackRegisterAvailability_MissingSP_Description" xml:space="preserve">
    <value>{0} stack data has been supplied but the stack pointer value is missing.</value>
  </data>
  <data name="CIPDStackRegisterAvailability_MissingSP_Title" xml:space="preserve">
    <value>Stack Pointer (R13) Not Available</value>
  </data>
  <data name="CIPDThreadValidity_NoStack_Description" xml:space="preserve">
    <value>{0} stack data is not available.</value>
  </data>
  <data name="CIPDThreadValidity_NoStack_Title" xml:space="preserve">
    <value>Stack Data Unavailable</value>
  </data>
  <data name="CIProblemDetector_Msg_Stack" xml:space="preserve">
    <value>In relation to the {0} mode stack,</value>
  </data>
  <data name="CIProblemDetector_Msg_Thread" xml:space="preserve">
    <value>In relation to the thread '{0}',</value>
  </data>
  <data name="CIStackBuilder_AddressInfoException_BaseAddressBeforeTopAddress" xml:space="preserve">
    <value>The stack base address appears to be invalid.</value>
  </data>
  <data name="CIStackBuilder_AddressInfoException_PointerMissing" xml:space="preserve">
    <value>Unable to reconstruct call stack as no value was supplied for the current stack pointer (R13).</value>
  </data>
  <data name="CIStackBuilder_AddressInfoException_PointerOutOfBounds" xml:space="preserve">
    <value>The current stack pointer (R13) is outside of the stack address boundary.</value>
  </data>
  <data name="CIStackBuilder_AddressInfoException_TopAddressAfterBaseAddress" xml:space="preserve">
    <value>The stack top/limiting address appears to be invalid.</value>
  </data>
  <data name="CIStackBuilder_Error_Title" xml:space="preserve">
    <value>Stack Reconstruction Error</value>
  </data>
  <data name="CIStackBuilder_Warning_Title" xml:space="preserve">
    <value>Stack Reconstruction Warning</value>
  </data>
  <data name="CPIDStackDataValidator_Description" xml:space="preserve">
    <value>{0} the stack pointer is outside of the supplied stack data. This may mean that part of the reconstructed call stack is omitted.</value>
  </data>
  <data name="CPIDStackDataValidator_Title" xml:space="preserve">
    <value>Stack Data Incomplete</value>
  </data>
</root>