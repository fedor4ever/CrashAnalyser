<?xml version='1.0' encoding='UTF-8'?>
<panic_category>
  <category_name>E32USER-CBase</category_name>
  <category_description> &lt;p&gt;Panics with this category are raised in user side code by member functions of &lt;code&gt;CBase&lt;/code&gt; derived classes that reside in &lt;code class="filename"&gt;euser.dll&lt;/code&gt;. Typically, they are caused by passing bad or contradictory values to class constructors or member functions. &lt;/p&gt;&lt;p&gt; The thread causing the panic is terminated. &lt;/p&gt;</category_description>
  <panics>
    <panic>
      <panic_id>1</panic_id>
      <panic_description>&lt;p&gt;This panic is raised by the &lt;code&gt;Set()&lt;/code&gt; member function of &lt;code&gt;CAsyncCallBack&lt;/code&gt;, if this active object is already active when the function is called. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>2</panic_id>
      <panic_description>&lt;p&gt;&lt;i&gt;This panic is raised in debug builds only.&lt;/i&gt; &lt;/p&gt; &lt;p&gt; This panic is raised by the &lt;code&gt;Call()&lt;/code&gt; member function of &lt;code&gt;CAsyncOneShot&lt;/code&gt; if the active object has not already been added to the active scheduler. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>3</panic_id>
      <panic_description>&lt;p&gt;This panic is raised during construction of a dynamic buffer (a &lt;code class="ApiItem" &gt;CBufFlat&lt;/code&gt; or a &lt;code class="ApiItem" &gt;CBufSeg&lt;/code&gt;) when the value of the granularity passed to the constructors is negative. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>4</panic_id>
      <panic_description>&lt;p&gt;This panic is raised when reading from a dynamic buffer (a &lt;code class="ApiItem" &gt;CBufFlat&lt;/code&gt; or a &lt;code class="ApiItem" &gt;CBufSeg&lt;/code&gt;) using the &lt;code&gt;Read()&lt;/code&gt; member function. It is caused by attempting to read beyond the end of the buffer. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>5</panic_id>
      <panic_description>&lt;p&gt;This panic is raised when writing to a dynamic buffer (a &lt;code class="ApiItem" &gt;CBufFlat&lt;/code&gt; or a &lt;code class="ApiItem" &gt;CBufSeg&lt;/code&gt;) using the &lt;code&gt;Write()&lt;/code&gt; member function. It is caused by attempting to write beyond the end of the buffer. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>6</panic_id>
      <panic_description>&lt;p&gt;This panic is raised when reading from a dynamic buffer (a &lt;code class="ApiItem" &gt;CBufFlat&lt;/code&gt; or a &lt;code class="ApiItem" &gt;CBufSeg&lt;/code&gt;) using the &lt;code&gt;Read()&lt;/code&gt; member function. It is caused by specifying a negative length for the amount of data to be read &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>7</panic_id>
      <panic_description>&lt;p&gt;This panic is raised when writing to a dynamic buffer (a &lt;code class="ApiItem" &gt;CBufFlat&lt;/code&gt; or a &lt;code class="ApiItem" &gt;CBufSeg&lt;/code&gt;) using the &lt;code&gt;Write()&lt;/code&gt; member function. It is caused by specifying a negative length for the amount of data to be written. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>8</panic_id>
      <panic_description>&lt;p&gt;This panic is raised when inserting data into a dynamic buffer (a &lt;code class="ApiItem" &gt;CBufFlat&lt;/code&gt; or a &lt;code class="ApiItem" &gt;CBufSeg&lt;/code&gt;) using the &lt;code&gt;InsertL()&lt;/code&gt; member function or when inserting an uninitialized region into the dynamic buffer using the &lt;code&gt;ExpandL()&lt;/code&gt; member function. It is caused by passing a negative length value to these functions. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>9</panic_id>
      <panic_description>&lt;p&gt;This panic is raised when inserting data into a dynamic buffer (a &lt;code class="ApiItem" &gt;CBufFlat&lt;/code&gt; or a &lt;code class="ApiItem" &gt;CBufSeg&lt;/code&gt;) using the &lt;code&gt;InsertL()&lt;/code&gt; member function. It is caused when the variant of &lt;code&gt;InsertL()&lt;/code&gt; which takes a pointer to &lt;code&gt;TAny&lt;/code&gt;, is passed a NULL pointer value. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>10</panic_id>
      <panic_description>&lt;p&gt;This panic is raised when specifying the minimum amount of space which a flat dynamic buffer (a &lt;code class="ApiItem" &gt;CBufFlat&lt;/code&gt;) should occupy using the &lt;code&gt;SetReserveL()&lt;/code&gt; member function. It is caused when the size value passed to the function is negative. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>11</panic_id>
      <panic_description>&lt;p&gt;This panic is raised when specifying the minimum amount of space which a flat dynamic buffer (a &lt;code class="ApiItem" &gt;CBufFlat&lt;/code&gt;) should occupy using the &lt;code&gt;SetReserveL()&lt;/code&gt; member function. It is caused when the size value passed to the function is less than the current size of the buffer. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>12</panic_id>
      <panic_description>&lt;p&gt;This panic is raised by the &lt;code&gt;Delete()&lt;/code&gt;, &lt;code&gt;Ptr()&lt;/code&gt;, &lt;code&gt;BackPtr()&lt;/code&gt; member functions of a flat dynamic buffer (a &lt;code class="ApiItem" &gt;CBufFlat&lt;/code&gt;); the panic can also be raised by &lt;code&gt;InsertL()&lt;/code&gt; and &lt;code&gt;ExpandL()&lt;/code&gt;. It is caused when the position value passed to these functions is either negative or represents a position beyond the end of the current buffer. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>13</panic_id>
      <panic_description>&lt;p&gt;This panic is raised by the &lt;code&gt;Delete()&lt;/code&gt; member function of a flat dynamic buffer (a &lt;code class="ApiItem" &gt;CBufFlat&lt;/code&gt;). It is caused when the combination of position and length values passed to the function implies an attempt to delete data beyond the end of the flat buffer. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>14</panic_id>
      <panic_description>&lt;p&gt;This panic is raised by the &lt;code&gt;Delete()&lt;/code&gt;, &lt;code&gt;Ptr()&lt;/code&gt;, &lt;code&gt;BackPtr()&lt;/code&gt; member functions of a segmented dynamic buffer (a &lt;code class="ApiItem" &gt;CBufSeg&lt;/code&gt;); the panic can also be raised by &lt;code&gt;InsertL()&lt;/code&gt; and &lt;code&gt;ExpandL()&lt;/code&gt;. It is caused when the position value passed to these functions is either negative or represents a position beyond the end of the current buffer. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>15</panic_id>
      <panic_description>&lt;p&gt;This panic is raised by the Delete() member function of a segmented dynamic buffer (a &lt;code class="ApiItem" &gt;CBufSeg&lt;/code&gt;). It is caused when the combination of position and length values passed to the function implies an attempt to delete data beyond the end of the segmented buffer. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>16</panic_id>
      <panic_description>&lt;p&gt;&lt;i&gt;This panic is raised in debug builds only.&lt;/i&gt; &lt;/p&gt; &lt;p&gt; This panic is raised by the &lt;code&gt;InsertL()&lt;/code&gt;, &lt;code&gt;Delete()&lt;/code&gt;, &lt;code&gt;Ptr()&lt;/code&gt; and &lt;code&gt;BackPtr()&lt;/code&gt; member functions as implemented for segmented buffers (&lt;code class="ApiItem" &gt;CBufSeg&lt;/code&gt;), when the offset within a segment, where data is to be inserted or removed, is greater than the buffer granularity. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>17</panic_id>
      <panic_description>&lt;p&gt;This panic is raised by the constructors of arrays of fixed length objects as represented, for example, by the classes &lt;code class="ApiItem" &gt;CArrayFixFlat&lt;/code&gt;, &lt;code class="ApiItem" &gt;CArrayFixSeg&lt;/code&gt; and &lt;code class="ApiItem" &gt;CArrayFixFlat&amp;lt;TAny&amp;gt;&lt;/code&gt;. It is caused when the record length is either negative or zero. &lt;/p&gt; &lt;p&gt; The record length is either explicitly specified as in the case of the &lt;code class="ApiItem" &gt;CArrayFixFlat&amp;lt;TAny&amp;gt;&lt;/code&gt; class or is implied by the length of the template class as in the case of the &lt;code class="ApiItem" &gt;CArrayFixFlat&lt;/code&gt; class. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>18</panic_id>
      <panic_description>&lt;p&gt;This panic is raised by the constructors of arrays of fixed length objects as represented, for example, by the classes: &lt;code class="ApiItem" &gt;CArrayFixFlat&lt;/code&gt; and &lt;code class="ApiItem" &gt;CArrayFixSeg&lt;/code&gt;. It is caused when the granularity passed to the constructors is either negative or zero. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>19</panic_id>
      <panic_description>&lt;p&gt;This panic is raised by the constructors of arrays of variable length objects as represented, for example, by the classes: &lt;code class="ApiItem" &gt;CArrayVarFlat&lt;/code&gt; and &lt;code class="ApiItem" &gt;CArrayVarSeg&lt;/code&gt;. It is caused when the granularity passed to the constructors is either negative or zero. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>20</panic_id>
      <panic_description>&lt;p&gt;This panic is raised by the constructors of packed arrays as represented, for example, by the class &lt;code class="ApiItem" &gt;CArrayPakFlat&lt;/code&gt;. It is caused when the granularity passed to the constructors is either negative or zero. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>21</panic_id>
      <panic_description>&lt;p&gt;This panic is raised by any operation which accesses an element of an array by explicit reference to an index number, for example, the &lt;code&gt;Delete()&lt;/code&gt;, &lt;code&gt;InsertL()&lt;/code&gt; and &lt;code&gt;At()&lt;/code&gt; member functions or the operator &lt;code&gt;Operator[]&lt;/code&gt;. It is caused by specifying an index value which is either negative or is greater than or equal to the number of objects currently within the array. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>22</panic_id>
      <panic_description>&lt;p&gt;This panic is raised when deleting contiguous elements from an array of fixed length objects (derived from &lt;code class="ApiItem" &gt;CArrayFixBase&lt;/code&gt;) using the &lt;code&gt;Delete()&lt;/code&gt; member function. It is caused by specifying the number of contiguous elements as a zero or negative value. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>23</panic_id>
      <panic_description>&lt;p&gt;This panic is raised when inserting contiguous elements into an array of fixed length objects (derived from &lt;code class="ApiItem" &gt;CArrayFixBase&lt;/code&gt;) using the &lt;code&gt;InsertL()&lt;/code&gt; member function. It is caused by specifying the number of contiguous elements as a zero or negative value. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>24</panic_id>
      <panic_description>&lt;p&gt;This panic is raised when resizing an array of fixed length objects (derived from &lt;code class="ApiItem" &gt;CArrayFixBase&lt;/code&gt;) using the &lt;code&gt;ResizeL()&lt;/code&gt; member function. It is caused by specifying the number of contiguous elements as a zero or negative value. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>25</panic_id>
      <panic_description>&lt;p&gt;This panic is raised when deleting contiguous elements from an array of variable length objects (derived from &lt;code class="ApiItem" &gt;CArrayVarBase&lt;/code&gt;) using the &lt;code&gt;Delete()&lt;/code&gt; member function. It is caused by specifying the number of contiguous elements as a zero or negative value. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>26</panic_id>
      <panic_description>&lt;p&gt;This panic is raised when deleting contiguous elements from a packed array (derived from &lt;code class="ApiItem" &gt;CArrayPakBase&lt;/code&gt;) using the &lt;code&gt;Delete()&lt;/code&gt; member function. It is caused by specifying the number of contiguous elements as a zero or negative value. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>27</panic_id>
      <panic_description>&lt;p&gt;This panic is raised when reserving space in flat arrays of fixed length objects, (the &lt;code class="ApiItem" &gt;CArrayFixFlat&lt;/code&gt;,&lt;code class="ApiItem" &gt;CArrayFixFlat&amp;lt;TAny&amp;gt;&lt;/code&gt; and &lt;code class="ApiItem" &gt;CArrayPtrFlat&lt;/code&gt; classes ) using the &lt;code&gt;SetReserveL()&lt;/code&gt; member function. It is caused by specifying the number of elements, for which space is to be reserved, as less than the current number of elements in the array. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>28</panic_id>
      <panic_description>&lt;p&gt;This panic is raised when inserting or appending replicated elements to the arrays of fixed length objects &lt;code class="ApiItem" &gt;CArrayFixFlat&lt;/code&gt; and &lt;code class="ApiItem" &gt;CArrayFixSeg&lt;/code&gt; using the &lt;code&gt;InsertL()&lt;/code&gt; or &lt;code&gt;AppendL()&lt;/code&gt; functions. It is caused by specifying the number of replicas as negative or zero. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>29</panic_id>
      <panic_description>&lt;p&gt;This panic is raised when deleting elements from a fixed length, variable length or packed array (derived from &lt;code class="ApiItem" &gt;CArrayFixBase&lt;/code&gt;, &lt;code class="ApiItem" &gt;CArrayVarBase&lt;/code&gt; and &lt;code class="ApiItem" &gt;CArrayPakBase&lt;/code&gt;) using the &lt;code&gt;Delete()&lt;/code&gt; function. It is caused when the specification of the position of the first element to be deleted and the number of contiguous elements to be deleted refers to elements which are outside the bounds of the array. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>30</panic_id>
      <panic_description>&lt;p&gt;This panic is raised when inserting into, appending onto, expanding or extending a variable length array or a packed array (i.e. arrays derived from &lt;code class="ApiItem" &gt;CArrayVar&lt;/code&gt; or &lt;code class="ApiItem" &gt;CArrayPak&lt;/code&gt;) using the &lt;code&gt;InsertL()&lt;/code&gt;, &lt;code&gt;AppendL()&lt;/code&gt;, &lt;code&gt;ExpandL()&lt;/code&gt; or &lt;code&gt;ExtendL()&lt;/code&gt; functions respectively. It is caused by specifying the length of the element as a negative value. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>33</panic_id>
      <panic_description>&lt;p&gt;This panic is raised by the destructor of a &lt;code class="ApiItem" &gt;CObject&lt;/code&gt;. It is caused, if an attempt is made to delete the &lt;code class="ApiItem" &gt;CObject&lt;/code&gt; when the reference count is not zero. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>34</panic_id>
      <panic_description>&lt;p&gt;This panic is raised by the &lt;code&gt;Close()&lt;/code&gt; member function of a &lt;code class="ApiItem" &gt;CObject&lt;/code&gt;. It is caused, if the reference count is negative. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>35</panic_id>
      <panic_description>&lt;p&gt;This panic is raised by the &lt;code&gt;Remove()&lt;/code&gt; member function of an object container, a &lt;code class="ApiItem" &gt;CObjectCon&lt;/code&gt;. It is caused when the &lt;code class="ApiItem" &gt;CObject&lt;/code&gt; to be removed from the container is not contained by the container. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>36</panic_id>
      <panic_description>&lt;p&gt;This panic is raised by the &lt;code&gt;Remove()&lt;/code&gt; member function of a container index, a &lt;code class="ApiItem" &gt;CObjectConIx&lt;/code&gt;. It is caused when the object container, a &lt;code class="ApiItem" &gt;CObjectCon&lt;/code&gt;, to be removed from the index is not contained by the index. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>37</panic_id>
      <panic_description>&lt;p&gt;This panic is raised by the &lt;code&gt;Remove()&lt;/code&gt; member function of an object index, a &lt;code class="ApiItem" &gt;CObjectIx&lt;/code&gt;. It is caused when the handle passed to the &lt;code&gt;Remove()&lt;/code&gt; function does not represent a &lt;code class="ApiItem" &gt;CObject&lt;/code&gt; known to the object index. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>38</panic_id>
      <panic_description>&lt;p&gt;This panic is raised by the &lt;code&gt;At()&lt;/code&gt;, &lt;code&gt;FindByName()&lt;/code&gt; and &lt;code&gt;FindByFullName()&lt;/code&gt; member functions of an object container, a &lt;code class="ApiItem" &gt;CObjectCon&lt;/code&gt;. It is caused when the unique ID as derived from the handle is not the same as the unique ID held by the object container. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>39</panic_id>
      <panic_description>&lt;p&gt;This panic is raised by the &lt;code&gt;At()&lt;/code&gt; member function of an object container, a &lt;code class="ApiItem" &gt;CObjectCon&lt;/code&gt;. It is caused when the index represented by the handle is outside the permitted range. In effect, the handle is bad. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>40</panic_id>
      <panic_description>&lt;p&gt;This panic is raised by the destructor of an active object, a &lt;code class="ApiItem" &gt;CActive&lt;/code&gt;. It is caused by an attempt to delete the active object while it still has a request outstanding. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>41</panic_id>
      <panic_description>&lt;p&gt;This panic is raised by the &lt;code&gt;Add()&lt;/code&gt; member function of an active scheduler, a &lt;code class="ApiItem" &gt;CActiveScheduler&lt;/code&gt;. It is caused by an attempt to add an active object to the active scheduler when it has already been added to the active scheduler &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>42</panic_id>
      <panic_description>&lt;p&gt;This panic is raised by the &lt;code&gt;SetActive()&lt;/code&gt; member function of an active object, a &lt;code class="ApiItem" &gt;CActive&lt;/code&gt;. It is caused by an attempt to flag the active object as active when it is already active, i.e. a request is still outstanding. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>43</panic_id>
      <panic_description>&lt;p&gt;This panic is raised by the &lt;code&gt;Install()&lt;/code&gt; member function of an active scheduler, a &lt;code class="ApiItem" &gt;CActiveScheduler&lt;/code&gt;. It is caused by attempting to install this active scheduler as the current active scheduler when there is already a current active scheduler; i.e. an active scheduler has already been installed. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>44</panic_id>
      <panic_description>&lt;p&gt;This panic is raised by the &lt;code&gt;Start()&lt;/code&gt;, &lt;code&gt;Stop()&lt;/code&gt; and &lt;code&gt;Add()&lt;/code&gt; member functions of an active scheduler, a &lt;code class="ApiItem" &gt;CActiveScheduler&lt;/code&gt;. It is raised when the thread has no attached active scheduler &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>45</panic_id>
      <panic_description>&lt;p&gt;This panic is raised by the &lt;code&gt;Stop()&lt;/code&gt; member function of an active scheduler, a &lt;code class="ApiItem" &gt;CActiveScheduler&lt;/code&gt;. Calling &lt;code&gt;Stop()&lt;/code&gt; terminates the wait loop started by the most recent call to &lt;code&gt;Start()&lt;/code&gt;. The panic is caused by a call to &lt;code&gt;Stop()&lt;/code&gt; which is not matched by a corresponding call to &lt;code&gt;Start()&lt;/code&gt;. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>46</panic_id>
      <panic_description>&lt;p&gt;This panic is raised by an active scheduler, a &lt;code class="ApiItem" &gt;CActiveScheduler&lt;/code&gt;. It is caused by a stray signal. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>47</panic_id>
      <panic_description>&lt;p&gt;This panic is raised by the &lt;code&gt;Error()&lt;/code&gt; virtual member function of an active scheduler, a &lt;code class="ApiItem" &gt;CActiveScheduler&lt;/code&gt;. This function is called when an active object&amp;#8217;s &lt;code&gt;RunL()&lt;/code&gt; function leaves. Applications always replace the &lt;code&gt;Error()&lt;/code&gt; function in a class derived from &lt;code&gt;CActiveScheduler&lt;/code&gt;; the default behaviour provided by &lt;code&gt;CActiveScheduler&lt;/code&gt; raises this panic. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>48</panic_id>
      <panic_description>&lt;p&gt;This panic is raised by the &lt;code&gt;Add()&lt;/code&gt; member function of an active scheduler, a &lt;code class="ApiItem" &gt;CActiveScheduler&lt;/code&gt;, when a NULL pointer is passed to the function. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>49</panic_id>
      <panic_description>&lt;p&gt;This panic is raised by the &lt;code&gt;SetActive()&lt;/code&gt; and &lt;code&gt;Deque()&lt;/code&gt; member functions of an active object, a &lt;code class="ApiItem" &gt;CActive&lt;/code&gt;. It is raised if the active object has not been added to the active scheduler. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>50</panic_id>
      <panic_description>&lt;p&gt;This panic is raised by the &lt;code&gt;SetPriority()&lt;/code&gt; member function of an active object, a &lt;code class="ApiItem" &gt;CActive&lt;/code&gt;. It is caused by an attempt to change the priority of the active object while it is active, i.e. while a request is outstanding). &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>51</panic_id>
      <panic_description>&lt;p&gt;This panic is raised by the &lt;code&gt;At()&lt;/code&gt;, &lt;code&gt;After()&lt;/code&gt; and &lt;code&gt;Lock()&lt;/code&gt; member functions of the &lt;code class="ApiItem" &gt;CTimer&lt;/code&gt; active object. It is caused by an attempt to request a timer event when the &lt;code&gt;CTimer&lt;/code&gt; active object has not been added to the active scheduler. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>52</panic_id>
      <panic_description>&lt;p&gt;This panic is raised by the &lt;code&gt;Start()&lt;/code&gt; member function of the periodic timer active object, a &lt;code class="ApiItem" &gt;CPeriodic&lt;/code&gt;, when a negative time interval is passed to the function. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>53</panic_id>
      <panic_description>&lt;p&gt;This panic is raised by the &lt;code&gt;Start()&lt;/code&gt; member function of the periodic timer active object, a &lt;code class="ApiItem" &gt;CPeriodic&lt;/code&gt;, when a negative delay time interval is passed to the function. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>54</panic_id>
      <panic_description>&lt;p&gt;This panic is raised by the &lt;code&gt;RunL()&lt;/code&gt; member function of the &lt;code class="ApiItem" &gt;CServer&lt;/code&gt; active object base class responsible for handling asynchronous requests from a client thread when the client passes a negative function code in &lt;code class="ApiItem" &gt;RMessage&lt;/code&gt;. The only negative values permitted are RMessage::EConnect and RMessage::EDisConnect. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>55</panic_id>
      <panic_description>&lt;p&gt;This panic is raised by the &lt;code&gt;Start()&lt;/code&gt; member function of the &lt;code class="ApiItem" &gt;CServer&lt;/code&gt; active object base class responsible for handling asynchronous requests from a client thread. It is caused by the server having no name. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>56</panic_id>
      <panic_description>&lt;p&gt;This panic is raised by the &lt;code&gt;New()&lt;/code&gt; and &lt;code&gt;NewL()&lt;/code&gt; member functions of &lt;code&gt;CBitMapAllocator&lt;/code&gt; when a negative or zero size is passed to them. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>57</panic_id>
      <panic_description>&lt;p&gt;This panic is raised by the &lt;code&gt;Free(TInt aPos)&lt;/code&gt; member function of &lt;code&gt;CBitMapAllocator&lt;/code&gt; when a position value is passed which is out of bounds. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>58</panic_id>
      <panic_description>&lt;p&gt;This panic is raised by the &lt;code&gt;IsFree(TInt aPos)&lt;/code&gt; member function of &lt;code&gt;CBitMapAllocator&lt;/code&gt; when a position value is passed which is out of bounds. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>59</panic_id>
      <panic_description>&lt;p&gt;This panic is raised by the &lt;code&gt;AllocFromTopFrom(TInt aPos)&lt;/code&gt; member function of &lt;code&gt;CBitMapAllocator&lt;/code&gt; when a position value is passed which is out of bounds. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>62</panic_id>
      <panic_description>&lt;p&gt;This panic is raised by the &lt;code&gt;AllocAt()&lt;/code&gt; member function of &lt;code&gt;CBitMapAllocator&lt;/code&gt; when the implied position has already been allocated. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>63</panic_id>
      <panic_description>&lt;p&gt;This panic is raised as a result of a call to the &lt;code&gt;Pop()&lt;/code&gt; and &lt;code&gt;PopAndDestroy()&lt;/code&gt; static member functions of the &lt;code class="ApiItem" &gt;CleanupStack&lt;/code&gt; class. The panic occurs when TRAPs have been nested and an attempt is made to pop too many items from the cleanup stack for the current nest level. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>64</panic_id>
      <panic_description>&lt;p&gt;This panic is raised as a result of a call to the &lt;code&gt;Pop()&lt;/code&gt; and &lt;code&gt;PopAndDestroy()&lt;/code&gt; static member functions of the &lt;code class="ApiItem" &gt;CleanupStack&lt;/code&gt; class. The panic occurs when attempt is made to pop more items from the cleanup stack than are on the cleanup stack. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>65</panic_id>
      <panic_description>&lt;p&gt;The panic is raised as a result of a call to the &lt;code&gt;Pop()&lt;/code&gt; and &lt;code&gt;PopAndDestroy()&lt;/code&gt; static member functions of the &lt;code&gt;CleanupStack&lt;/code&gt; class. The panic occurs when an attempt is made to pop more items from the cleanup stack than are on the cleanup stack. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>66</panic_id>
      <panic_description>&lt;p&gt;This panic is raised if an attempt is being made to insert a cleanup item into a position on the cleanup stack reserved for marking the current &lt;code class="ApiItem" &gt;TRAP&lt;/code&gt; nest level. In practice this error occurs if the call to &lt;code class="ApiItem" &gt;CleanupStack::PushL()&lt;/code&gt; happens when there has been no call to &lt;code&gt;TRAP()&lt;/code&gt;. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>67</panic_id>
      <panic_description>&lt;p&gt;This panic is raised when building a &lt;code&gt;TCleanupStackItem&lt;/code&gt; which is to be added to the cleanup stack. The building of the &lt;code&gt;TCleanupStackItem&lt;/code&gt; needs a &lt;code class="ApiItem" &gt;TCleanupItem&lt;/code&gt; and this has been constructed with a NULL cleanup operation (a &lt;code class="ApiItem" &gt;TCleanupOperation&lt;/code&gt;). &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>68</panic_id>
      <panic_description>&lt;p&gt;This panic is raised if there are no free slots available on the cleanup stack to insert a cleanup item &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>69</panic_id>
      <panic_description>&lt;p&gt;This panic is raised if no trap handler has been installed. In practice, this occurs if &lt;code class="ApiItem" &gt;CTrapCleanup&lt;/code&gt; &lt;code&gt;::New()&lt;/code&gt; has not been called before using the cleanup stack. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>70</panic_id>
      <panic_description>&lt;p&gt;This panic is raised as a result of a call to the versions of the &lt;code&gt;Pop()&lt;/code&gt; and &lt;code&gt;PopAndDestroy()&lt;/code&gt; static member functions of the &lt;code class="ApiItem" &gt;CleanupStack&lt;/code&gt; class which take an explicit count of the items to be popped. The panic is caused by passing a negative value for the number of items to be popped. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>71</panic_id>
      <panic_description>&lt;p&gt;This panic is raised when &lt;code class="ApiItem" &gt;TRAP&lt;/code&gt;s have been nested and an attempt is made to exit from a &lt;code class="ApiItem" &gt;TRAP&lt;/code&gt; nest level before all the cleanup items belonging to that level have been popped off the cleanup stack. &lt;/p&gt; &lt;p&gt; There must be the same number of items on the cleanup stack on entering a &lt;code class="ApiItem" &gt;TRAP&lt;/code&gt; harness as there is on exiting. In other words, anything that is pushed onto the cleanup stack inside a &lt;code class="ApiItem" &gt;TRAP&lt;/code&gt; harness must be popped off before leaving the harness. &lt;/p&gt; &lt;p&gt; For example, the following code avoids this panic when &lt;code&gt;FooLC()&lt;/code&gt; does not leave, by explicitly popping &lt;code&gt;pointer&lt;/code&gt; before the end of the harness: &lt;/p&gt; &lt;pre&gt;&lt;code class="cpp"&gt;TRAPD(error,&amp;nbsp;pointer&amp;nbsp;=&amp;nbsp;FooLC();&amp;nbsp;CleanupStack::Pop(pointer));&lt;/code&gt;&lt;/pre&gt; &lt;p&gt; See also &lt;a href="../../guide/KernelandHardwareServices/usrlib_filesrv/userlib/MemoryManagement/CleanupSupport/CleanupSupportGuide1/HowToTrap.guide.html#CleanupSupportGuide1%2ehow%2dto%2etrap%2duse"&gt;How to use TRAP&lt;/a&gt;. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>72</panic_id>
      <panic_description>&lt;p&gt;This panic is raised by the constructor of the circular buffer base class, a &lt;code class="ApiItem" &gt;CCirBufBase&lt;/code&gt;, when the size value passed is zero or negative. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>73</panic_id>
      <panic_description>&lt;p&gt;This panic is raised by a call to the &lt;code&gt;SetLengthL()&lt;/code&gt; member function of of the circular buffer base class, a &lt;code class="ApiItem" &gt;CCirBufBase&lt;/code&gt;, by passing a length value which is zero or negative. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>74</panic_id>
      <panic_description>&lt;p&gt;This panic is raised by a call to the &lt;code&gt;Add()&lt;/code&gt; member function of a circular buffer, a &lt;code class="ApiItem" &gt;CCirBuf&lt;/code&gt; when the pointer to the item to be added is NULL. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>75</panic_id>
      <panic_description>&lt;p&gt;This panic is raised by a call to the &lt;code&gt;Add()&lt;/code&gt; member function of a circular buffer, a &lt;code class="ApiItem" &gt;CCirBuf&lt;/code&gt; when the number of items to be added is zero or negative &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>76</panic_id>
      <panic_description>&lt;p&gt;This panic is raised by a call to the &lt;code&gt;Remove()&lt;/code&gt; member function of a circular buffer, a &lt;code class="ApiItem" &gt;CCirBuf&lt;/code&gt; when the number of items to be removed is zero or negative. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>89</panic_id>
      <panic_description>&lt;p&gt;Introduced in 6.0: This panic is raised by call to the &lt;code&gt;Replace()&lt;/code&gt; member function of &lt;code class="ApiItem" &gt;CActiveScheduler&lt;/code&gt; when the replacement active scheduler is the same as the existing active scheduler. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>90</panic_id>
      <panic_description>&lt;p&gt;Introduced in 6.0: The panic is raised as a result of a call to the &lt;code&gt;Pop()&lt;/code&gt; and &lt;code&gt;PopAndDestroy()&lt;/code&gt; static member functions of the &lt;code&gt;CleanupStack&lt;/code&gt; class. The panic occurs when an the item to be popped is not the expected item. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>91</panic_id>
      <panic_description>&lt;p&gt;This panic is raised by &lt;code class="ApiItem" &gt;CActiveSchedulerWait::Start()&lt;/code&gt; when the &lt;code class="ApiItem" &gt;CActiveSchedulerWait&lt;/code&gt; object has already been started. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>92</panic_id>
      <panic_description>&lt;p&gt;This panic is raised by &lt;code class="ApiItem" &gt;CActiveSchedulerWait::AsyncStop()&lt;/code&gt; and &lt;code class="ApiItem" &gt;CActiveSchedulerWait::CanStopNow()&lt;/code&gt; when the &lt;code class="ApiItem" &gt;CActiveSchedulerWait&lt;/code&gt; object has not been started. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>93</panic_id>
      <panic_description>&lt;p&gt;This panic is raised during construction of a &lt;code class="ApiItem" &gt;CAsyncOneShot&lt;/code&gt; if the attempt to open a handle to the current thread fails. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>94</panic_id>
      <panic_description>&lt;p&gt;Not used. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>95</panic_id>
      <panic_description>&lt;p&gt;This panic is raised on calls to the default implementations of functions: &lt;code class="ApiItem" &gt;CPolicyServer::CustomSecurityCheckL()&lt;/code&gt; and &lt;code class="ApiItem" &gt;CPolicyServer::CustomFailureActionL()&lt;/code&gt;. &lt;/p&gt; &lt;p&gt; The class &lt;code class="ApiItem" &gt;CPolicyServer&lt;/code&gt; is intended to be derived from, and these functions in particular need to be re-implemented in a derived class. This panic is a symptom of a failure to provide a derived class. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>96</panic_id>
      <panic_description>&lt;p&gt;&lt;i&gt;This panic is raised in debug builds only.&lt;/i&gt; &lt;/p&gt; &lt;p&gt; It is raised by the protected &lt;code class="ApiItem" &gt;CPolicyServer&lt;/code&gt; constructor, if the first element pointed to by the &lt;code&gt;iRanges&lt;/code&gt; member of the &lt;code class="ApiItem" &gt;TPolicy&lt;/code&gt; &lt;code&gt;aPolicy&lt;/code&gt; parameter does not have a value of 0; i.e. if &lt;code&gt;aPolicy&lt;/code&gt;'s &lt;code class="ApiItem" &gt;TPolicy::iRanges&lt;/code&gt; &lt;code&gt;[0]&lt;/code&gt; is not 0. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>97</panic_id>
      <panic_description>&lt;p&gt;&lt;i&gt;This panic is raised in debug builds only.&lt;/i&gt; &lt;/p&gt; &lt;p&gt; It is raised by the protected &lt;code class="ApiItem" &gt;CPolicyServer&lt;/code&gt; constructor, if the value of each element of the &lt;code&gt;iRanges&lt;/code&gt; member of the &lt;code class="ApiItem" &gt;TPolicy&lt;/code&gt; &lt;code&gt;aPolicy&lt;/code&gt; parameter is not greater than the value of the previous element. &lt;/p&gt; &lt;p&gt; See also &lt;code class="ApiItem" &gt;TPolicy::iRanges&lt;/code&gt;. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>98</panic_id>
      <panic_description>&lt;p&gt;&lt;i&gt;This panic is raised in debug builds only.&lt;/i&gt; &lt;/p&gt; &lt;p&gt; It is raised by the protected &lt;code class="ApiItem" &gt;CPolicyServer&lt;/code&gt; constructor, if the value of every element in the &lt;code&gt;iElementsIndex&lt;/code&gt; member of the &lt;code class="ApiItem" &gt;TPolicy&lt;/code&gt; &lt;code&gt;aPolicy&lt;/code&gt; parameter is not valid. &lt;/p&gt; &lt;p&gt; Elements of &lt;code&gt;iElementsIndex&lt;/code&gt; are invalid if their values are either: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; less than &lt;code&gt;ESpecialCaseHardLimit&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; or &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; greater than &lt;code&gt;ESpecialCaseLimit&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; See also &lt;code class="ApiItem" &gt;TPolicy::iElementsIndex&lt;/code&gt; and &lt;code class="ApiItem" &gt;CPolicyServer::TSpecialCase&lt;/code&gt;. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>99</panic_id>
      <panic_description>&lt;p&gt;&lt;i&gt;This panic is raised in debug builds only.&lt;/i&gt; &lt;/p&gt; &lt;p&gt; It is raised by the protected &lt;code class="ApiItem" &gt;CPolicyServer&lt;/code&gt; constructor, if the value of the &lt;code&gt;iOnConnect&lt;/code&gt; member of the &lt;code class="ApiItem" &gt;TPolicy&lt;/code&gt; &lt;code&gt;aPolicy&lt;/code&gt; parameter is not valid. &lt;/p&gt; &lt;p&gt; The &lt;code&gt;iOnConnect&lt;/code&gt; member is invalid if its value is either: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; less than &lt;code&gt;ESpecialCaseHardLimit&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; or &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; greater than &lt;code&gt;ESpecialCaseLimit&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; See also &lt;code class="ApiItem" &gt;TPolicy::iOnConnect&lt;/code&gt; and &lt;code class="ApiItem" &gt;CPolicyServer::TSpecialCase&lt;/code&gt;. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>100</panic_id>
      <panic_description>&lt;p&gt;This panic is raised if &lt;code class="ApiItem" &gt;CPolicyServer::iPolicy&lt;/code&gt; is found to be invalid for some unknown reason. &lt;/p&gt; &lt;p&gt; If you run the server in debug mode, it is likely that the server will panic with one of the panic codes in the range 96 to 99 inclusive. These are described above. &lt;/p&gt; &lt;p&gt; See &lt;code class="ApiItem" &gt;CPolicyServer&lt;/code&gt; for information about what constitutes a valid policy. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>101</panic_id>
      <panic_description>&lt;p&gt;This panic is raised when the value returned by the &lt;code class="ApiItem" &gt;CPolicyServer::CustomSecurityCheckL()&lt;/code&gt; and &lt;code class="ApiItem" &gt;CPolicyServer::CustomFailureActionL()&lt;/code&gt; functions is invalid. &lt;/p&gt; &lt;p&gt; The &lt;code class="ApiItem" &gt;CPolicyServer::TCustomResult&lt;/code&gt; enum defines the valid set of return values. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>102</panic_id>
      <panic_description>&lt;p&gt;&lt;i&gt;This panic is raised in debug builds only.&lt;/i&gt; &lt;/p&gt; &lt;p&gt; It is raised by the protected &lt;code class="ApiItem" &gt;CPolicyServer&lt;/code&gt; constructor, if the value of the &lt;code&gt;iRangeCount&lt;/code&gt; member of the &lt;code class="ApiItem" &gt;TPolicy&lt;/code&gt; &lt;code&gt;aPolicy&lt;/code&gt; parameter is not greater than 0. A value of 0 implies that no policies have been passed to the policy server. It is a requirement that at least one policy be passed to the policy server. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>103</panic_id>
      <panic_description>&lt;p&gt;This panic is raised by the policy server framework if a message fails a policy check, whether custom or not. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>104</panic_id>
      <panic_description>&lt;p&gt;&lt;i&gt;This panic is raised in debug builds only.&lt;/i&gt; &lt;/p&gt; &lt;p&gt; It is raised by a number of &lt;code class="ApiItem" &gt;CObjectIx&lt;/code&gt; member functions if the object's data becomes inconsistent. &lt;/p&gt;</panic_description>
    </panic>
  </panics>
</panic_category>