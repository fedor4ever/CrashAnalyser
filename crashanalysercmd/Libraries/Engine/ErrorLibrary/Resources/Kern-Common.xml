<?xml version='1.0' encoding='UTF-8'?>
<panic_category>
  <category_name>Kern-Common</category_name>
  <category_description> &lt;p&gt;KERN-COMMON panics are raised by the kernel when various kernel-side utility functions are called with bad arguments.&lt;/p&gt;</category_description>
  <panics>
    <panic>
      <panic_id>19</panic_id>
      <panic_description>&lt;p&gt;This panic is raised if an invalid descriptor type is given to Kern::KUDesGet() or Kern::KUDesPut(). &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>20</panic_id>
      <panic_description>&lt;p&gt;This panic is raised when a length value passed to an 8-bit variant descriptor member function is invalid. It may be raised by some descriptor constructors and, specifically, by the &lt;code&gt;Replace()&lt;/code&gt; and &lt;code&gt;Set()&lt;/code&gt; descriptor member functions. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>21</panic_id>
      <panic_description>&lt;p&gt;This panic is raised when the index value passed to the 8-bit variant descriptor &lt;code&gt;Operator[]&lt;/code&gt; is out of bounds. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>22</panic_id>
      <panic_description>&lt;p&gt;This panic is raised when the position value passed to an 8-bit	variant descriptor member function is out of bounds. It may be raised by the &lt;code&gt;Left()&lt;/code&gt;, &lt;code&gt;Right()&lt;/code&gt;, &lt;code&gt;Mid()&lt;/code&gt;, &lt;code&gt;Insert()&lt;/code&gt;, &lt;code&gt;Delete()&lt;/code&gt; and &lt;code&gt;Replace()&lt;/code&gt; descriptor member functions. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>23</panic_id>
      <panic_description>&lt;p&gt;This panic is raised if the source passed to Kern::KUDesGet() is longer than the maximum length of the destination. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>26</panic_id>
      <panic_description>&lt;p&gt;This panic is raised when expanding or contracting an	&lt;code class="ApiItem" &gt;HBufC8&lt;/code&gt; buffer using the &lt;code&gt;ReAlloc()&lt;/code&gt; or	&lt;code&gt;ReAllocL()&lt;/code&gt; descriptor member functions. Specifically, the panic occurs if the new length being specified is too small to contain the data. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>28</panic_id>
      <panic_description>&lt;p&gt;This panic is raised by the &lt;code&gt;Replace()&lt;/code&gt; member function of the 8-bit variant descriptor &lt;code class="ApiItem" &gt;TDes8&lt;/code&gt;, when the length of the source descriptor is negative or exceeds the maximum length of the target descriptor. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>29</panic_id>
      <panic_description>&lt;p&gt;This panic is raised when 8-bit variant descriptors are constructed with negative length values. It may also be raised if the &lt;code&gt;Set()&lt;/code&gt;,	&lt;code&gt;Repeat()&lt;/code&gt; and the &lt;code&gt;Find()&lt;/code&gt; member functions are passed	negative length values. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>30</panic_id>
      <panic_description>&lt;p&gt;This panic is raised when 8-bit variant descriptors are constructed	with negative maximum length values. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>88</panic_id>
      <panic_description>&lt;p&gt;This panic is raised by Mem::Compare(), Mem::CompareC() and	Mem::CompareF() when the length of the area of memory designated as the left hand area, is negative. This panic is raised in debug builds only. On the user	side this is associated with the USER category; on the kernel side this is associated with the KERN-COMMON category. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>89</panic_id>
      <panic_description>&lt;p&gt;This panic is raised by Mem::Compare(), Mem::CompareC() and	Mem::CompareF() when the length of the area of memory designated as the right hand area, is negative. This panic is raised in debug builds only. On the user side this is associated with the USER category; on the kernel side this is	associated with the KERN-COMMON category. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>90</panic_id>
      <panic_description>&lt;p&gt;This panic is raised by Mem::Copy() when the length of the area of memory to be copied is negative. This panic is raised in debug builds only. On	the user side this is associated with the USER category; on the kernel side	this is associated with the KERN-COMMON category. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>91</panic_id>
      <panic_description>&lt;p&gt;This panic is raised by Mem::Move() when the length of the area of memory to be moved is not a multiple of 4. This panic is raised in debug builds only. On the user side this is associated with the USER category; on the kernel side this is associated with the KERN-COMMON category.  &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>92</panic_id>
      <panic_description>&lt;p&gt;This panic is raised by Mem::Move() when the address of the source for the move operation is not aligned on a 4 byte boundary. This panic is raised in debug builds only. On the user side this is associated with the USER	category; on the kernel side this is associated with the KERN-COMMON category. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>93</panic_id>
      <panic_description>&lt;p&gt;This panic is raised by Mem::Move() when the address of the target for the move operation is not aligned on a 4 byte boundary. This panic is raised in debug builds only. On the user side this is associated with the USER category; on the kernel side this is associated with the KERN-COMMON category.  &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>94</panic_id>
      <panic_description>&lt;p&gt;This panic is raised by Mem::Swap() when the length of the area of memory to be swapped is negative. This panic is raised in debug builds only. On the user side this is associated with the USER category; on the kernel side this is associated with the KERN-COMMON category.  &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>95</panic_id>
      <panic_description>&lt;p&gt;This panic is raised by Mem::Fill() and Mem::FillZ() when the length of the area of memory to be filled is negative. This panic is raised in debug builds only. On the user side this is associated with the USER category; on the kernel side this is associated with the KERN-COMMON category. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>190</panic_id>
      <panic_description>&lt;p&gt;This panic is raised when the security policy is found to be corrupt while performing a security policy check.  &lt;/p&gt;</panic_description>
    </panic>
  </panics>
</panic_category>