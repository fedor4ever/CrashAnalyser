<?xml version="1.0" encoding="utf-8"?>
<panic_category>
  <category_name>W32</category_name>
  <category_description>W32 is a synchronous interface onto the window server that user code can include, link to and invoke instead of sending low level client-server requests to the window server. Some errors can be detected before they are sent to the server and are raised as panics from W32. Code in the W32 synchronous interface runs in the client’s thread, so it raises panics in situations it can understand on the current thread via User::Panic(). These panics have a category of W32. &lt;br&gt;&lt;br&gt;To minimise strain on the system, W32 can cache several requests in order in a buffer and send them as a group to the server. This means that a panic might not be caused by a bug in the last client-side code to run, but by an earlier line that does not get its request serviced until later. To debug such a panic it is often useful to turn on auto flushing.&lt;br&gt;&lt;br&gt;Window server synchronous interface (W32) panics are raised by the synchronous interface onto the window server when it realises a client has attempted an action the interface can’t legally pass on to the window server thread. Because the interface is synchronous, the current thread is panicked, and the request is never sent to the window server.&lt;br&gt;&lt;br&gt;These panics are defined in the enumeration TW32Panic in w32cmd.h.&lt;br&gt;&lt;br&gt;Note that some panics are raised in debug builds only.</category_description>
  <panics>
	<panic>
    	<panic_id>0</panic_id>
    	<panic_description>An attempt was made to reconnect to the window server using RWsSession::Connect(). It is only possible to reconnect if the current session has been closed.</panic_description>
  	</panic>
	<panic>
		<panic_id>1</panic_id>
	    <panic_description>Not used.</panic_description>
	</panic>
	<panic>
    	<panic_id>2</panic_id>
    	<panic_description>Not used.</panic_description>
  	</panic>
	<panic>
		<panic_id>3</panic_id>
		<panic_description>Not used.</panic_description>
	</panic>
	<panic>
		<panic_id>4</panic_id>
		<panic_description>Raised by CWindowGc::MapColors() when its aNumPairs argument has a value greater than 16.</panic_description>
	</panic>
	<panic>
		<panic_id>5</panic_id>
		<panic_description>Data is too long to fit into the window server's client side buffer, see Client-side buffer.&lt;br&gt;&lt;br&gt;Introduced in v6.0.</panic_description>
	</panic>
	<panic>
		<panic_id>6</panic_id>
		<panic_description>CWsScreenDevice::SetCustomPalette() was called with a NULL pointer.&lt;br&gt;&lt;br&gt;Introduced in v7.0.</panic_description>
	</panic>
	<panic>
    	<panic_id>7</panic_id>
    	<panic_description>CWsScreenDevice::SetPalette() failed, but no error code could be returned. Debug builds for the emulator only.&lt;br&gt;&lt;br&gt;Introduced in v7.0.</panic_description>
	</panic>
	<panic>
    	<panic_id>8</panic_id>
    	<panic_description>A direct screen access function was called out of turn.&lt;br&gt;&lt;br&gt;Introduced in v7.0.</panic_description>
	</panic>
	<panic>
		<panic_id>9</panic_id>
		<panic_description>An attempt was made to pass an invalid region to the window server. Debug builds only.&lt;br&gt;&lt;br&gt;Introduced in v7.0s.</panic_description>
	</panic>
  </panics>
</panic_category>