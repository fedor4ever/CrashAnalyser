<?xml version='1.0' encoding='UTF-8'?>
<panic_category>
  <category_name>KERN-EXEC</category_name>
  <category_description> &lt;p&gt; These panics represent program errors which are detected by the Kernel Executive. Typically, they are caused by passing bad or contradictory parameters to functions. Threads which cause exceptions also raise a KERN-EXEC panic. &lt;/p&gt; &lt;p&gt; The thread causing the panic is terminated. &lt;/p&gt;</category_description>
  <panics>
    <panic>
      <panic_id>0</panic_id>
      <panic_description>&lt;p&gt; This panic is raised when the Kernel cannot find an object in the object index for the current process or current thread using the specified object index number (the raw handle number). &lt;/p&gt; &lt;p&gt; The most common reason for this is trying to use a kernel-side resource without first having sucessfully created it or sucessfully opened it. Typically, such resources are created or opened through user side handles, which are instances of classes derived from &lt;code class="ApiItem"&gt;RHandleBase&lt;/code&gt;, for example, &lt;code class="ApiItem"&gt;RLibrary&lt;/code&gt;, &lt;code class="ApiItem"&gt;RThread&lt;/code&gt;, &lt;code class="ApiItem"&gt;RProcess&lt;/code&gt;, &lt;code class="ApiItem"&gt;RSemaphore&lt;/code&gt; etc. [Note that this list is not exhaustive]. &lt;/p&gt; &lt;p&gt; For example, a call to &lt;code class="ApiItem"&gt;RLibrary::Lookup()&lt;/code&gt; panics with KERN-EXEC 0 if not preceded by a successful call to &lt;code class="ApiItem"&gt;RLibrary::Load()&lt;/code&gt;. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>1</panic_id>
      <panic_description>&lt;p&gt; This is a general panic raised as a result of trying an unauthorised activity such as trying to suspend a thread, to set the priority of a thread or to set the priority of a process, when not authorised to do so. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>2</panic_id>
      <panic_description>&lt;p&gt; This panic is raised by the kernel when opening a kernel side object, a &lt;code class="ApiItem"&gt;DObject&lt;/code&gt; type, and the fullname is invalid. &lt;/p&gt; &lt;p&gt; The fullname is deemed to be invalid if it contains a character that is not one of the printable characters lying between 0x20 and 0x7e inclusive, or it contains an asterisk or a question mark. &lt;/p&gt; &lt;p&gt; See also &lt;code class="ApiItem"&gt;Kern::ValidateFullName()&lt;/code&gt;. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>3</panic_id>
      <panic_description>&lt;p&gt; This panic is raised when an unhandled exception occurs. Exceptions have many causes, but the most common are access violations caused, for example, by dereferencing NULL. Among other possible causes are: general protection faults, executing an invalid instruction, alignment checks, etc. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>4</panic_id>
      <panic_description>&lt;p&gt; This panic is not used. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>5</panic_id>
      <panic_description>&lt;p&gt; This panic is not used. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>6</panic_id>
      <panic_description>&lt;p&gt; This panic is raised by the kernel when a handle to a code segment is invalid. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>7</panic_id>
      <panic_description>&lt;p&gt; This panic is not used. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>8</panic_id>
      <panic_description>&lt;p&gt; This panic is not used. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>9</panic_id>
      <panic_description>&lt;p&gt; This is a general type of panic that is usually raised by a device driver when dealing with an asynchronous request, and it finds that an asynchronous request is already outstanding. For an example of the context in which this is raised, see &lt;code class="filename"&gt;...\cedar\e32test\examples\driver1\driver1_ldd.cpp&lt;/code&gt;. &lt;/p&gt; &lt;p&gt; This panic is also raised when trying to subscribe to a property through a call to &lt;code class="ApiItem"&gt;RProperty::Subscribe()&lt;/code&gt; and there is already an outstanding subscription on this property handle. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>10</panic_id>
      <panic_description>&lt;p&gt; This panic is raised by &lt;code class="ApiItem"&gt;DLogicalChannel::Request()&lt;/code&gt; when the request number passed to the function is smaller than the permitted minimum. &lt;/p&gt; &lt;p&gt; See also &lt;code class="ApiItem"&gt;DLogicalChannel::EMinRequestId&lt;/code&gt;. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>11</panic_id>
      <panic_description>&lt;p&gt; This panic is raised when creating a logical channel, and the unit number is outside the permitted range: &lt;/p&gt; &lt;p&gt; If unit numbers are not permitted, the unit number value must be &lt;code class="ApiItem"&gt;KNullUnit&lt;/code&gt;. &lt;/p&gt; &lt;p&gt; If unit numbers are permitted, the unit number value must be less than &lt;code class="ApiItem"&gt;KMaxUnits&lt;/code&gt;. &lt;/p&gt; &lt;p&gt; A logical channel is created as a result of a call to &lt;code class="ApiItem"&gt;RBusLogicalChannel::DoCreate()&lt;/code&gt;. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>12</panic_id>
      <panic_description>&lt;p&gt; This panic is raised by the kernel if an event capture hook has already been designated. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>13</panic_id>
      <panic_description>&lt;p&gt; This panic is raised by the kernel if the current thread is not the designated event capture hook. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>14</panic_id>
      <panic_description>&lt;p&gt; This panic is raised when an attempt is made to set the priority of a thread or process to an illegal value. &lt;/p&gt; &lt;p&gt; The permitted priority values for a user process are a subset of the values defined by the &lt;code class="ApiItem"&gt;TProcessPriority&lt;/code&gt; enum. The permitted values are: &lt;/p&gt; &lt;code&gt; EPriorityLow &lt;/code&gt; &lt;p&gt; &lt;code&gt;EPriorityBackground &lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt;EPriorityForeground &lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt;EPriorityHigh &lt;/code&gt; &lt;/p&gt; &lt;p&gt; The permitted priority values for a user thread are a subset of the values defined by the &lt;code class="ApiItem"&gt;TThreadPriority&lt;/code&gt; enum. The permitted values are: &lt;/p&gt; &lt;p&gt; &lt;code&gt; EPriorityMuchLess &lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt; EPriorityLess &lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt; EPriorityNormal &lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt;EPriorityMore &lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt; EPriorityMuchMore &lt;/code&gt; &lt;/p&gt; &lt;code&gt;EPriorityRealTime &lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt;EPriorityAbsoluteVeryLow &lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt; EPriorityAbsoluteLow &lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt; EPriorityAbsoluteBackground &lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt; EPriorityAbsoluteForeground &lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt; EPriorityAbsoluteHigh &lt;/code&gt; &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>15</panic_id>
      <panic_description>&lt;p&gt; This panic is raised when a timer event is requested from an asynchronous timer service, an &lt;code class="ApiItem"&gt;RTimer&lt;/code&gt;, and a timer event is already outstanding. It is caused by calling either the &lt;code&gt;At()&lt;/code&gt;, &lt;code&gt;After()&lt;/code&gt; or &lt;code&gt;Lock()&lt;/code&gt; member functions after a previous call to any of these functions, but before the timer event requested by those functions has completed. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>16</panic_id>
      <panic_description>&lt;p&gt; This panic is not used. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>17</panic_id>
      <panic_description>&lt;p&gt; The panic is raised if kernel heap checking has failed. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>18</panic_id>
      <panic_description>&lt;p&gt; This panic is not used. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>19</panic_id>
      <panic_description>&lt;p&gt; This panic is raised by the Kernel when a server program makes a request to receive a message, i.e. when it calls the &lt;code&gt;Receive()&lt;/code&gt; member function of &lt;code&gt;RServer2&lt;/code&gt;, the handle to the Kernel side server object. The panic occurs when a receive message request has previously been made and is still outstanding. &lt;/p&gt; &lt;p&gt; Note that &lt;code&gt;RServer2&lt;/code&gt; is internal to Symbian &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>20</panic_id>
      <panic_description>&lt;p&gt; This panic is raised by the Kernel when a request for an event, as originated by a call to &lt;code&gt;UserSvr::RequestEvent()&lt;/code&gt;, defined in &lt;code class="filename"&gt;e32svr.h&lt;/code&gt;, is made while a previously made request is still outstanding. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>21</panic_id>
      <panic_description>&lt;p&gt; This panic is not used. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>22</panic_id>
      <panic_description>&lt;p&gt; This panic is not used. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>23</panic_id>
      <panic_description>&lt;p&gt; This panic is raised in a call to &lt;code class="ApiItem"&gt;RSessionBase::ShareAuto()&lt;/code&gt; or &lt;code class="ApiItem"&gt;RSessionBase::ShareProtected()&lt;/code&gt;, i.e. when attempting to create a session with a server that can be shared, and the server does not allow or support shared sessions. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>24</panic_id>
      <panic_description>&lt;p&gt; This panic is raised when writing global DLL data, and the length of data to be written is greater than the space available. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>25</panic_id>
      <panic_description>&lt;p&gt; This panic is raised when searching for objects, using the internal function &lt;code&gt;TFindHandleBase::NextObject()&lt;/code&gt;, and an invalid type of object is specified; i.e. it is not a thread, process, chunk, mutex etc. etc. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>26</panic_id>
      <panic_description>&lt;p&gt; This panic is raised by kernel side code that implements heap debugging behaviour, when a specific debug request is not recognised. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>27</panic_id>
      <panic_description>&lt;p&gt; This panic is raised when an executive call is made with an invalid call number. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>28</panic_id>
      <panic_description>&lt;p&gt; This panic is not used. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>29</panic_id>
      <panic_description>&lt;p&gt; This panic is not used. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>30</panic_id>
      <panic_description>&lt;p&gt; This panic is raised when an attempt is being made to send a synchronous message to a server more than once, using the current thread's dedicated synchronous message. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>31</panic_id>
      <panic_description>&lt;p&gt; This panic is not used. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>32</panic_id>
      <panic_description>&lt;p&gt; This panic is called by &lt;code&gt;DProcess::Resume()&lt;/code&gt; when trying to resume a process that is still being loaded. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>33</panic_id>
      <panic_description>&lt;p&gt; This panic is raised in a call to &lt;code class="ApiItem"&gt;Kern::KUDesInfo()&lt;/code&gt;, &lt;code class="ApiItem"&gt;Kern::KUDesPut()&lt;/code&gt; etc, when an invalid descriptor is passed. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>34</panic_id>
      <panic_description>&lt;p&gt; This panic is raised in a call to &lt;code class="ApiItem"&gt;Kern::KUDesSetLength()&lt;/code&gt; &amp;amp; &lt;code class="ApiItem"&gt;Kern::KUDesPut()&lt;/code&gt; when the descriptor passed to it is not a modifiable type; i.e. is derived from &lt;code class="ApiItem"&gt;TDesC&lt;/code&gt; but not derived from &lt;code class="ApiItem"&gt;TDes&lt;/code&gt;. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>35</panic_id>
      <panic_description>&lt;p&gt; This panic is raised in a call to &lt;code class="ApiItem"&gt;Kern::KUDesSetLength()&lt;/code&gt; &amp;amp; &lt;code class="ApiItem"&gt;Kern::KUDesPut()&lt;/code&gt; when the length of the source descriptor is longer than the maximum length of the target descriptor. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>36</panic_id>
      <panic_description>&lt;p&gt; This panic is raised by the kernel side code that implements the setting of the currency symbol when the length of the currency symbol is greater than &lt;code class="ApiItem"&gt;KMaxCurrencySymbol&lt;/code&gt;. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>37</panic_id>
      <panic_description>&lt;p&gt; This panic is raised by kernel code when it tries to acquire the process DLL lock just before a load, and the wait DLL lock is invalid. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>38</panic_id>
      <panic_description>&lt;p&gt; This panic is raised by internal kernel code when an illegal attempt is made to attach to a library. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>39</panic_id>
      <panic_description>&lt;p&gt; This panic is raised when extracting a list of DLL entry points, and the number exceeds the maximum permitted. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>40</panic_id>
      <panic_description>&lt;p&gt; This panic is raised by internal kernel code when an illegal attempt is made to detach a library. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>41</panic_id>
      <panic_description>&lt;p&gt; This panic is raised by internal kernel code when an illegal attempt is made to attach to a library. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>42</panic_id>
      <panic_description>&lt;p&gt; This panic is raised by internal kernel code when an illegal attempt is made to detach a library. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>43</panic_id>
      <panic_description>&lt;p&gt; This panic is raised by kernel code when it tries to release the process DLL lock when a load fails, and the release DLL lock is invalid. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>44</panic_id>
      <panic_description>&lt;p&gt; This panic is raised when a bad message handle is passed to the kernel. This usually occurs when using functions called on the &lt;code class="ApiItem"&gt;RMessagePtr2&lt;/code&gt; or &lt;code class="ApiItem"&gt;RMessage2&lt;/code&gt; classes after the message has been completed; or when the &lt;code&gt;iHandle&lt;/code&gt; data member of the base class &lt;code class="ApiItem"&gt;RHandleBase&lt;/code&gt; has become corrupt. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>45</panic_id>
      <panic_description>&lt;p&gt; This panic is not used. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>46</panic_id>
      <panic_description>&lt;p&gt; This panic can be raised as a result of a call to one of a large number of functions. In general, the panic indicates an attempt to perform an operation on a thread or process by code running in another process - violating the security principle of process isolation. &lt;/p&gt; &lt;p&gt; There are exceptions to this general rule, for example, where the panic is raised because the calling process has insufficient capability. The precise reason is stated with the function(s). &lt;/p&gt; &lt;p&gt; The panic is raised on a call to the following function if the process owning the thread performing the call is not the creator of the target process or, if a handle is specified, the handle is not local. &lt;/p&gt; &lt;p&gt; &lt;code class="ApiItem"&gt;RProcess::SetParameter()&lt;/code&gt; &lt;/p&gt; &lt;p&gt; The panic is raised on a call to the following functions if the process owning the thread performing the call is not the same as the target process. &lt;/p&gt; &lt;p&gt; &lt;code class="ApiItem"&gt;RProcess::Kill()&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code class="ApiItem"&gt;RProcess::Terminate()&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code class="ApiItem"&gt;RProcess::Panic()&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code class="ApiItem"&gt;RProcess::SetJustInTime()&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code class="ApiItem"&gt;RProcess::Resume()&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code class="ApiItem"&gt;RThread::Kill()&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code class="ApiItem"&gt;RThread::Terminate()&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code class="ApiItem"&gt;RThread::Panic()&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code class="ApiItem"&gt;RThread::Suspend()&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code class="ApiItem"&gt;RThread::Resume()&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code class="ApiItem"&gt;RThread::SetPriority()&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code class="ApiItem"&gt;RThread::RequestComplete()&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code class="ApiItem"&gt;RThread::RequestSignal()&lt;/code&gt; &lt;/p&gt; &lt;p&gt; NOTE: the creator of a new process can kill or panic the new process, change the new process priority and set the new process startup parameters until the process is resumed (which the creator can also do). After the new process has been resumed, then it becomes totally independent of its creator, and any attempt to panic it, kill it etc will raise the KERN-EXEC 46 panic. &lt;/p&gt; &lt;p&gt; The panic is raised on call to the following (Symbian partner only) functions if the calling process does not have the &lt;em&gt;PowerMgmt&lt;/em&gt; capability (&lt;code class="ApiItem"&gt;TCapability::ECapabilityPowerMgmt&lt;/code&gt;): &lt;/p&gt; &lt;p&gt; &lt;code class="ApiItem"&gt;Power::PowerDown()&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code class="ApiItem"&gt;Power::EnableWakeupEvents()&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code class="ApiItem"&gt;Power::DisableWakeupEvents()&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code class="ApiItem"&gt;Power::RequestWakeupEventNotification()&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code class="ApiItem"&gt;Power::CancelWakeupEventNotification()&lt;/code&gt; &lt;/p&gt; &lt;p&gt; The panic is raised on call to the following functions if the calling process does not have the &lt;em&gt;WriteDeviceData&lt;/em&gt; capability (&lt;code class="ApiItem"&gt;TCapability::ECapabilityWriteDeviceData&lt;/code&gt;): &lt;/p&gt; &lt;p&gt; &lt;code class="ApiItem"&gt;User::SetMachineConfiguration()&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code class="ApiItem"&gt;User::SetHomeTime()&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code class="ApiItem"&gt;User::SetUTCTime()&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code class="ApiItem"&gt;User::SetUTCOffset()&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code class="ApiItem"&gt;User::SetUTCTimeAndOffset()&lt;/code&gt; &lt;/p&gt; &lt;p&gt; The panic is raised on call to the following function if the calling process does not have the &lt;em&gt;ReadDeviceData&lt;/em&gt; capability (&lt;code class="ApiItem"&gt;TCapability::ECapabilityReadDeviceData&lt;/code&gt;): &lt;/p&gt; &lt;p&gt; &lt;code class="ApiItem"&gt;User::MachineConfiguration()&lt;/code&gt; &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>47</panic_id>
      <panic_description>&lt;p&gt; This panic is raised when the user issues a request to be notified of messages or the availability of space, when a request has already been issued and is still outstanding. &lt;/p&gt; &lt;p&gt; See &lt;code class="ApiItem"&gt;RMsgQueue&lt;/code&gt;, asynchronous message queues. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>48</panic_id>
      <panic_description>&lt;p&gt; This panic is raised when creating a message queue, and the size of the template parameter is invalid. &lt;/p&gt; &lt;p&gt; See &lt;code class="ApiItem"&gt;RMsgQueue&lt;/code&gt;, asynchronous message queues. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>49</panic_id>
      <panic_description>&lt;p&gt; This panic is raised when creating a message queue, and the specified number of slots is not positive. &lt;/p&gt; &lt;p&gt; See &lt;code class="ApiItem"&gt;RMsgQueue&lt;/code&gt;, asynchronous message queues. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>50</panic_id>
      <panic_description>&lt;p&gt; This panic is raised if an attempt is made to cancel an outstanding request to be notified of messages or the availability of space, and the cancel is being made by a thread in a different process to the one from which the request was originally made. &lt;/p&gt; &lt;p&gt; See &lt;code class="ApiItem"&gt;RMsgQueue&lt;/code&gt;, asynchronous message queues. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>51</panic_id>
      <panic_description>&lt;p&gt; This panic is raised by &lt;code&gt;RProcess::Setparameter()&lt;/code&gt; if a slot value is invalid. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>52</panic_id>
      <panic_description>&lt;p&gt; This panic is raised by &lt;code&gt;RProcess::Setparameter()&lt;/code&gt; if a slot is in use. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>53</panic_id>
      <panic_description>&lt;p&gt; This panic is raised by &lt;code&gt;RProcess::Setparameter()&lt;/code&gt; if the length of the data passed is negative. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>54</panic_id>
      <panic_description>&lt;p&gt; This panic is raised by &lt;code class="ApiItem"&gt;RCondVar::Wait()&lt;/code&gt; when the current thread does not hold the specified mutex. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>55</panic_id>
      <panic_description>&lt;p&gt; This panic is raised when a call is made to &lt;code&gt;RThread::GetDesMaxLength()&lt;/code&gt;, which is now obsolete. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>56</panic_id>
      <panic_description>&lt;p&gt; This panic is raised on a process which has not yet been resumed, and whose creator has died. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>57</panic_id>
      <panic_description>&lt;p&gt; This panic is raised when a session receives a message to connect to a server when the session is already connected to that server. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>58</panic_id>
      <panic_description>&lt;p&gt; This panic is raised during an attempt to connect to a server. As part of this process, a pointer to an instance of the &lt;code class="ApiItem"&gt;CSession2&lt;/code&gt; derived class is saved in the instance of the &lt;code class="ApiItem"&gt;CServer2&lt;/code&gt; derived class. &lt;/p&gt; &lt;p&gt; The panic is caused when the pointer to the session object is NULL. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>59</panic_id>
      <panic_description>&lt;p&gt; This panic is raised during an attempt to connect to a server. As part of this process, a pointer to an instance of the &lt;code class="ApiItem"&gt;CSession2&lt;/code&gt; derived class is saved in the instance of the &lt;code class="ApiItem"&gt;CServer2&lt;/code&gt; derived class. &lt;/p&gt; &lt;p&gt; This panic is caused when a pointer to the session has previously been set. &lt;/p&gt;</panic_description>
    </panic>
    <panic>
      <panic_id>60</panic_id>
      <panic_description>&lt;p&gt; This panic is raised during an attempt to connect to a server. As part of this process, a pointer to an instance of the &lt;code class="ApiItem"&gt;CSession2&lt;/code&gt; derived class is saved in the instance of the &lt;code class="ApiItem"&gt;CServer2&lt;/code&gt; derived class. &lt;/p&gt; &lt;p&gt;This panic is caused when a pointer to a session is being set, and the message is not the connect message.&lt;/p&gt;</panic_description>
    </panic>
  </panics>
</panic_category>